"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[259],{33282:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new class, which you can define with the passed function.\\n\\n```lua\\nlocal MyClass = Class.new(function(def)\\n    def.maxTemp = 250\\n    def.windy = false\\n\\n    def.getMaxTemp = Class.addMethod(function()\\n        return self.maxTemp\\n    end)\\nend)\\n```\\n\\n#### The `def` parameter\\nThis is a parameter that is passed to your defining function. When you assign a new index to the definition, it will either be a method or property. When assigning a new method (static or not),\\nyou need to use [ClassBuilder.addMethod](#addMethod) so that you can get a [ClassMethod](#ClassMethod). Then, set the key to the new [ClassMethod](#ClassMethod) that you have just created. Now,\\nif you want to assign just a general property, you can just set the index equal to whatever you want the property to be. There is no special way to do it, simply imagine you are assigning a\\nvalue to any table.\\n\\n```lua\\ndef.myFirstProperty = \\"hi\\"\\ndef.mySecondProp = 12\\ndef.myCoolTable = {\\n    \\"cat\\",\\n    \\"dog\\",\\n    \\"bird\\"\\n}\\n\\ndef.myMethod = Class.addMethod(function()\\n    -- imagine there was something important here\\nend)\\n```\\n\\n:::caution\\nWhen you have a `private` method, make sure to only call it with the `def`.\\n:::","params":[{"name":"definition","desc":"The function that will be called so you can define the class","lua_type":"function"}],"returns":[{"desc":"The class object that you have created","lua_type":"Class"}],"function_type":"static","source":{"line":127,"path":"src/ClassBuilder.lua"}},{"name":"addMethod","desc":"Creates a table that can be consumed by your class when you define methods.\\n\\n```lua\\nlocal Cake = Class.new(function(def)\\n    def.bake = Class.addMethod(function(self, temp)\\n        print(\\"Baking the cake at \\" .. temp .. \\"degrees\\")\\n\\n        self.cookTemp = temp\\n        self.crisp = true\\n    end)\\nend)\\n```","params":[{"name":"...","desc":"Modifiers of the function","lua_type":"any"},{"name":"f","desc":"The method to obtain a table for","lua_type":"function"}],"returns":[{"desc":"The method that can be added to the class","lua_type":"ClassMethod"}],"function_type":"static","source":{"line":233,"path":"src/ClassBuilder.lua"}},{"name":"modifiers","desc":"Returns the modifiers that you can pass to your methods.\\n\\n```lua\\nlocal static, private = Class.modifiers()\\nlocal Cake = Class.new(function(def)\\n    def.announce = Class.addMethod(static, function(flavor)\\n        print(\\"Gee I sure could go for a \\" .. flavor .. \\" cake right about now\\")\\n    end)\\n\\n    def.getTemperature = Class.addMethod(private, function(self)\\n        return self.cookTemp\\n    end)\\n\\n    def.testTemp = Class.addMethod(function(self)\\n        local cakeTemp = def.getTemperature()\\n        \\n        if cakeTemp > 200 then\\n            print(\\"Yeah we can definitely eat this now\\")\\n        else\\n            print(\\"It needs to go back into the oven\\")\\n        end\\n    end)\\n)\\n```\\n\\nUsing the previous example, we can display this functionality with our `Cake` class.\\n\\n```lua\\nCake.announce(\\"chocolate\\") -- Gee I sure could go for a chocolate cake right about now\\n\\nlocal myCake = Cake.new()\\nmyCake.testTemp() -- It needs to go back into the oven\\n```","params":[],"returns":[{"desc":"The static modifier","lua_type":"static"},{"desc":"The private modifier","lua_type":"private"}],"function_type":"static","source":{"line":289,"path":"src/ClassBuilder.lua"}}],"properties":[{"name":"RESTRICTED_DEFINITIONS","desc":"A list of definitions that you are not allowed to use when defining methods or properties.","lua_type":"{string}","source":{"line":30,"path":"src/ClassBuilder.lua"}}],"types":[{"name":"ClassMethod","desc":"An object that represents a method that can be consumed by your class definition.","fields":[{"name":"methodSymbol","lua_type":"methodSymbol","desc":"A userdata to indicate that this is a method"},{"name":"call","lua_type":"function","desc":"The function that will be called when this method is used"},{"name":"methodModifiers","lua_type":"{static | private}","desc":"If you provide the `static` or `private` modifiers, they will appear here"}],"source":{"line":43,"path":"src/ClassBuilder.lua"}},{"name":"Class","desc":"Contains a `new` function to instantiate new objects, as well as any static methods.\\n\\n:::danger\\nAttempting to call a non-static method will result in an error. Specify the `static` modifier to use static methods.\\n:::","fields":[{"name":"new","lua_type":"function","desc":"A function that can be used to instantiate a new object"},{"name":"any","lua_type":"[function]","desc":"The **static** methods and properties that exist in the class"}],"source":{"line":62,"path":"src/ClassBuilder.lua"}},{"name":"Object","desc":"An instance of a class. Methods that affect properties of objects will only affect this object.\\n\\n:::danger\\nIf you passed the `private` modifier then you won\'t be able to call the method directly via the object. Remove the modifier if you need to use it outside of the definition.\\n:::","fields":[{"name":"any","lua_type":"[function | any]","desc":"The methods and properties of this Object"}],"source":{"line":79,"path":"src/ClassBuilder.lua"}}],"name":"ClassBuilder","desc":"The primary class that contains functions to help you create classes.","source":{"line":6,"path":"src/ClassBuilder.lua"}}')}}]);