[{"title":"Utils","type":0,"sectionRef":"#","url":"/LuaClass/api/Utils","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Utils","url":"/LuaClass/api/Utils#functions","content":" "},{"title":"FindTableValue​","type":1,"pageTitle":"Utils","url":"/LuaClass/api/Utils#FindTableValue","content":"&lt;/&gt; Utils.FindTableValue( t: table,-- The table that will be searched Value: any-- The value to look for ) → ( any,-- The value that is found, if any number-- The position of this value in table ) Searches for a value in a table. If found, returns the value followed by the index. If the value is not present, nil is returned. local myTable = {5, 8, 30} local value, index = Utils.FindTableValue(8) print(value, index) -- 8, 2  "},{"title":"ClassBuilder","type":0,"sectionRef":"#","url":"/LuaClass/api/ClassBuilder","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#types","content":" "},{"title":"ClassMethod​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#ClassMethod","content":"&lt;/&gt; interface ClassMethod { methodSymbol: methodSymbol-- A userdata to indicate that this is a method call: function-- The function that will be called when this method is used methodModifiers: {static | private}-- If you provide the static or private modifiers, they will appear here } An object that represents a method that can be consumed by your class definition.  "},{"title":"Class​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#Class","content":"&lt;/&gt; interface Class { new: function-- A function that can be used to instantiate a new object any: [function]-- The static methods and properties that exist in the class } Contains a new function to instantiate new objects, as well as any static methods. danger Attempting to call a non-static method will result in an error. Specify the static modifier to use static methods.  "},{"title":"Object​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#Object","content":"&lt;/&gt; interface Object { any: [function | any]-- The methods and properties of this Object } An instance of a class. Methods that affect properties of objects will only affect this object. danger If you passed the private modifier then you won't be able to call the method directly via the object. Remove the modifier if you need to use it outside of the definition. "},{"title":"Properties​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#properties","content":" "},{"title":"RESTRICTED_DEFINITIONS​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#RESTRICTED_DEFINITIONS","content":"&lt;/&gt; ClassBuilder.RESTRICTED_DEFINITIONS: {string} A list of definitions that you are not allowed to use when defining methods or properties. "},{"title":"Functions​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#new","content":"&lt;/&gt; ClassBuilder.new( definition: function-- The function that will be called so you can define the class ) → Class-- The class object that you have created Creates a new class, which you can define with the passed function. local MyClass = Class.new(function(def) def.maxTemp = 250 def.windy = false def.getMaxTemp = Class.addMethod(function() return self.maxTemp end) end) The def parameter This is a parameter that is passed to your defining function. When you assign a new index to the definition, it will either be a method or property. When assigning a new method (static or not), you need to use ClassBuilder.addMethod so that you can get a ClassMethod. Then, set the key to the new ClassMethod that you have just created. Now, if you want to assign just a general property, you can just set the index equal to whatever you want the property to be. There is no special way to do it, simply imagine you are assigning a value to any table. def.myFirstProperty = &quot;hi&quot; def.mySecondProp = 12 def.myCoolTable = { &quot;cat&quot;, &quot;dog&quot;, &quot;bird&quot; } def.myMethod = Class.addMethod(function() -- imagine there was something important here end) caution When you have a private method, make sure to only call it with the def.  "},{"title":"addMethod​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#addMethod","content":"&lt;/&gt; ClassBuilder.addMethod( ...: any,-- Modifiers of the function f: function-- The method to obtain a table for ) → ClassMethod-- The method that can be added to the class Creates a table that can be consumed by your class when you define methods. local Cake = Class.new(function(def) def.bake = Class.addMethod(function(self, temp) print(&quot;Baking the cake at &quot; .. temp .. &quot;degrees&quot;) self.cookTemp = temp self.crisp = true end) end)   "},{"title":"modifiers​","type":1,"pageTitle":"ClassBuilder","url":"/LuaClass/api/ClassBuilder#modifiers","content":"&lt;/&gt; ClassBuilder.modifiers() → ( static,-- The static modifier private-- The private modifier ) Returns the modifiers that you can pass to your methods. local static, private = Class.modifiers() local Cake = Class.new(function(def) def.announce = Class.addMethod(static, function(flavor) print(&quot;Gee I sure could go for a &quot; .. flavor .. &quot; cake right about now&quot;) end) def.getTemperature = Class.addMethod(private, function(self) return self.cookTemp end) def.testTemp = Class.addMethod(function(self) local cakeTemp = def.getTemperature() if cakeTemp &gt; 200 then print(&quot;Yeah we can definitely eat this now&quot;) else print(&quot;It needs to go back into the oven&quot;) end end) ) The static modifier specifies that a method can be used without instantiating an object. You would do this by directly calling the method on a class. (It would still work if you called it on an object.) The private modifier specifies that a method can only be used internally in a definition. This means that if you want to call a private method, use the def and then call the method. Using the previous example, we can display this functionality with our Cake class. Cake.announce(&quot;chocolate&quot;) -- Gee I sure could go for a chocolate cake right about now local myCake = Cake.new() myCake.testTemp() -- It needs to go back into the oven  "}]